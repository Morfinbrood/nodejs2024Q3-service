openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_getAllUsers
      parameters: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
      summary: Get all users
      tags: &ref_0
        - Users
    post:
      operationId: UsersController_createUser
      parameters: []
      requestBody:
        required: true
        description: Data to create a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          description: Invalid data for creating a user
      summary: Create a new user
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UsersController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          description: Invalid user ID format
        '404':
          description: User not found
      summary: Get a user by ID
      tags: *ref_0
    put:
      operationId: UsersController_updateUserPassword
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: Data to update the password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          description: Invalid user ID format
        '403':
          description: Wrong old password
        '404':
          description: User not found
      summary: Update user password
      tags: *ref_0
    delete:
      operationId: UsersController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid user ID format
        '404':
          description: User not found
      summary: Delete a user
      tags: *ref_0
  /track:
    get:
      operationId: TracksController_getAllTracks
      parameters: []
      responses:
        '200':
          description: List of all tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateTrackDto'
      summary: Get all tracks
      tags: &ref_1
        - Tracks
    post:
      operationId: TracksController_createTrack
      parameters: []
      requestBody:
        required: true
        description: Data to create a track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTrackDto'
      summary: Create a new track
      tags: *ref_1
  /track/{id}:
    get:
      operationId: TracksController_getTrackById
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTrackDto'
        '400':
          description: Invalid track ID format
        '404':
          description: Track not found
      summary: Get a track by ID
      tags: *ref_1
    put:
      operationId: TracksController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: Data to update the track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTrackDto'
        '400':
          description: Invalid track ID format
        '404':
          description: Track not found
      summary: Update track info
      tags: *ref_1
    delete:
      operationId: TracksController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Track successfully deleted
        '400':
          description: Invalid track ID format
        '404':
          description: Track not found
      summary: Delete a track
      tags: *ref_1
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    PublicUser:
      type: object
      properties:
        id:
          type: string
          description: UUID of the user
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          format: uuid
        login:
          type: string
          description: User login
          example: TEST_LOGIN
          minLength: 4
          maxLength: 255
        version:
          type: number
          description: Version of the user record
          example: 1
        createdAt:
          type: number
          description: Timestamp of user creation
          example: 1655000000
        updatedAt:
          type: number
          description: Timestamp of last user update
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
          example: TEST_LOGIN
          minLength: 4
          maxLength: 255
        password:
          type: string
          description: User password
          example: TEST_PASSWORD
          minLength: 4
          maxLength: 30
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: Old user password
          example: OLD_PASSWORD
          minLength: 4
          maxLength: 30
        newPassword:
          type: string
          description: New user password
          example: NEW_PASSWORD
          minLength: 4
          maxLength: 30
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the track
          example: Song Title
        artistId:
          type: string
          description: UUID of the artist
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        albumId:
          type: string
          description: UUID of the album
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        duration:
          type: number
          description: Duration of the track in seconds
          example: 240
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
          example: Updated Track Name
        duration:
          type: number
          description: Updated duration of the track in seconds
          example: 240
        artistId:
          type: string
          description: Updated UUID of the artist
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
        albumId:
          type: string
          description: Updated UUID of the album
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
